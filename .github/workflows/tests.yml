name: Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: "${{ matrix.os }}"
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - python-version: "3.12"
            os: ubuntu-latest
            coverage: true  # Mark only this combination for coverage to prevent error: https://sonarsource.atlassian.net/browse/SQSCANGHA-83 & https://community.sonarsource.com/t/my-first-analyses-has-failed-when-added-project-analysis-id-38152260-0ab1-4a18-846f-1f2371079b5f/134798/27
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup MiniConda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: cht_cyclones
          auto-update-conda: true
          channels: conda-forge

      - name: Create environment
        shell: bash -el {0}
        run: |
          conda create -n cht_cyclones python=${{ matrix.python-version }} -y

      - name: Install test dependencies
        run: |
          conda run -n cht_cyclones pip install -e ".[tests]"

      - name: Test with pytest
        run: |
          conda run -n cht_cyclones pytest tests

      - name: Upload coverage report
        if: matrix.coverage == true
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: coverage-report
          path: coverage.xml

  sonar_scan:
      name: SonarQube Scan
      runs-on: ubuntu-latest
      needs: test
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Download coverage report
          uses: actions/download-artifact@v4
          with:
            name: coverage-report

        - name: SonarQube Scan
          uses: SonarSource/sonarqube-scan-action@v4
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
